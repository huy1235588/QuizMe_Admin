"use client";

import React, { useState } from 'react';
import { Form, Input, Button, Card, Row, Col, Select, Switch, Avatar, Upload, message } from 'antd';
import { UserOutlined, UploadOutlined, SaveOutlined, CloseOutlined } from '@ant-design/icons';
import type { UploadProps } from 'antd';

const { Option } = Select;

interface UserFormData {
    fullName: string;
    email: string;
    role: string;
    isActive: boolean;
    avatar?: string;
}

interface UserFormProps {
    isDarkMode?: boolean;
    onSave: (userData: UserFormData) => Promise<void>;
    onCancel: () => void;
    loading?: boolean;
}

const UserForm: React.FC<UserFormProps> = ({
    isDarkMode = false,
    onSave,
    onCancel,
    loading = false
}) => {
    const [form] = Form.useForm();
    const [avatarUrl, setAvatarUrl] = useState<string>('');

    const cardClass = isDarkMode
        ? 'bg-gray-800 border-gray-700'
        : 'bg-white border-gray-200';

    const handleSubmit = async (values: UserFormData) => {
        try {
            await onSave({
                ...values,
                avatar: avatarUrl
            });
        } catch (error) {
            console.error('Error saving user:', error);
        }
    };

    const uploadProps: UploadProps = {
        name: 'avatar',
        listType: 'picture',
        maxCount: 1,
        beforeUpload: (file) => {
            const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';
            if (!isJpgOrPng) {
                message.error('Ch·ªâ c√≥ th·ªÉ t·∫£i l√™n file JPG/PNG!');
                return false;
            }
            const isLt2M = file.size / 1024 / 1024 < 2;
            if (!isLt2M) {
                message.error('K√≠ch th∆∞·ªõc ·∫£nh ph·∫£i nh·ªè h∆°n 2MB!');
                return false;
            }

            // Create preview URL
            const reader = new FileReader();
            reader.onload = (e) => {
                setAvatarUrl(e.target?.result as string);
            };
            reader.readAsDataURL(file);

            return false; // Prevent auto upload
        },
        onRemove: () => {
            setAvatarUrl('');
        }
    }; return (
        <div className="space-y-8">
            <Form
                form={form}
                layout="vertical"
                onFinish={handleSubmit}
                initialValues={{
                    role: 'user',
                    isActive: true
                }}
            >
                {/* Avatar Upload Section */}
                <Card
                    className={`border-0 shadow-lg ${cardClass}`}
                    title={
                        <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'}`}></div>
                            <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                üñºÔ∏è ·∫¢nh ƒë·∫°i di·ªán
                            </span>
                        </div>
                    }
                    bordered={false}
                >
                    <div className="text-center space-y-6">
                        <div className="relative inline-block">
                            <div className={`p-1 rounded-full bg-gradient-to-r from-purple-400 to-pink-500`}>
                                <Avatar
                                    size={120}
                                    icon={<UserOutlined />}
                                    src={avatarUrl}
                                    className="bg-white"
                                />
                            </div>
                            {!avatarUrl && (
                                <div className="absolute inset-0 flex items-center justify-center">
                                    <div className={`text-center ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                        <UserOutlined className="text-4xl mb-2" />
                                    </div>
                                </div>
                            )}
                        </div>

                        <div className="space-y-2">
                            <Upload {...uploadProps}>
                                <Button
                                    icon={<UploadOutlined />}
                                    className={`h-10 px-6 font-medium ${isDarkMode
                                            ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white border-0 hover:from-purple-700 hover:to-pink-700'
                                            : 'bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 hover:from-purple-600 hover:to-pink-600'
                                        }`}
                                >
                                    üì∑ T·∫£i l√™n ·∫£nh ƒë·∫°i di·ªán
                                </Button>
                            </Upload>
                            <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                ƒê·ªãnh d·∫°ng: JPG, PNG. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 2MB
                            </p>
                        </div>
                    </div>
                </Card>

                {/* Basic Information */}
                <Card
                    className={`border-0 shadow-lg ${cardClass}`}
                    title={
                        <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-blue-400' : 'bg-blue-500'}`}></div>
                            <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                üìù Th√¥ng tin c∆° b·∫£n
                            </span>
                        </div>
                    }
                    bordered={false}
                >
                    <Row gutter={[24, 24]}>
                        <Col xs={24} md={12}>
                            <Form.Item
                                name="fullName"
                                label={
                                    <span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                                        üë§ H·ªç v√† t√™n
                                    </span>
                                }
                                rules={[
                                    { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!' },
                                    { min: 2, message: 'H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!' }
                                ]}
                            >
                                <Input
                                    placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                                    className={`h-12 ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}
                                    size="large"
                                />
                            </Form.Item>
                        </Col>

                        <Col xs={24} md={12}>
                            <Form.Item
                                name="email"
                                label={
                                    <span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                                        üìß ƒê·ªãa ch·ªâ email
                                    </span>
                                }
                                rules={[
                                    { required: true, message: 'Vui l√≤ng nh·∫≠p email!' },
                                    { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá!' }
                                ]}
                            >
                                <Input
                                    placeholder="example@domain.com"
                                    className={`h-12 ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}
                                    size="large"
                                />
                            </Form.Item>
                        </Col>
                    </Row>
                </Card>

                {/* Account Settings */}
                <Card
                    className={`border-0 shadow-lg ${cardClass}`}
                    title={
                        <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-green-400' : 'bg-green-500'}`}></div>
                            <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                ‚öôÔ∏è C√†i ƒë·∫∑t t√†i kho·∫£n
                            </span>
                        </div>
                    }
                    bordered={false}
                >
                    <Row gutter={[24, 24]}>
                        <Col xs={24} md={12}>
                            <Form.Item
                                name="role"
                                label={
                                    <span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                                        üîë Vai tr√≤
                                    </span>
                                }
                                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn vai tr√≤!' }]}
                            >
                                <Select
                                    placeholder="Ch·ªçn vai tr√≤ cho ng∆∞·ªùi d√πng"
                                    className={isDarkMode ? 'dark-select' : ''}
                                    size="large"
                                >
                                    <Option value="user">
                                        <div className="flex items-center space-x-2">
                                            <span>üë§</span>
                                            <span>Ng∆∞·ªùi d√πng</span>
                                        </div>
                                    </Option>
                                    <Option value="admin">
                                        <div className="flex items-center space-x-2">
                                            <span>üëë</span>
                                            <span>Qu·∫£n tr·ªã vi√™n</span>
                                        </div>
                                    </Option>
                                    <Option value="moderator">
                                        <div className="flex items-center space-x-2">
                                            <span>üõ°Ô∏è</span>
                                            <span>ƒêi·ªÅu h√†nh vi√™n</span>
                                        </div>
                                    </Option>
                                </Select>
                            </Form.Item>
                        </Col>

                        <Col xs={24} md={12}>
                            <Form.Item
                                name="isActive"
                                label={
                                    <span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                                        üîì Tr·∫°ng th√°i t√†i kho·∫£n
                                    </span>
                                }
                                valuePropName="checked"
                            >
                                <div className="flex items-center space-x-3 mt-2">
                                    <Switch
                                        checkedChildren="‚úÖ K√≠ch ho·∫°t"
                                        unCheckedChildren="üîí Kh√≥a"
                                        size="default"
                                        className="bg-gradient-to-r"
                                    />
                                    <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                        T√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t ngay sau khi t·∫°o
                                    </span>
                                </div>
                            </Form.Item>
                        </Col>
                    </Row>

                    {/* Info Box */}
                    <div className={`mt-6 p-4 rounded-lg border-l-4 ${isDarkMode
                            ? 'bg-blue-900/20 border-blue-400 text-blue-300'
                            : 'bg-blue-50 border-blue-400 text-blue-700'
                        }`}>
                        <div className="flex items-start space-x-3">
                            <div className="text-xl">üí°</div>
                            <div>
                                <h4 className={`font-medium mb-1 ${isDarkMode ? 'text-blue-200' : 'text-blue-800'}`}>
                                    L∆∞u √Ω khi t·∫°o t√†i kho·∫£n
                                </h4>
                                <ul className={`text-sm space-y-1 ${isDarkMode ? 'text-blue-300' : 'text-blue-600'}`}>
                                    <li>‚Ä¢ Email s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng l√†m t√™n ƒëƒÉng nh·∫≠p</li>
                                    <li>‚Ä¢ M·∫≠t kh·∫©u t·∫°m th·ªùi s·∫Ω ƒë∆∞·ª£c g·ª≠i qua email</li>
                                    <li>‚Ä¢ Ng∆∞·ªùi d√πng n√™n ƒë·ªïi m·∫≠t kh·∫©u khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </Card>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-4">
                    <Button
                        icon={<CloseOutlined />}
                        onClick={onCancel}
                        className={`h-12 px-8 font-medium ${isDarkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}`}
                        size="large"
                    >
                        ‚ùå H·ªßy b·ªè
                    </Button>
                    <Button
                        type="primary"
                        icon={<SaveOutlined />}
                        htmlType="submit"
                        loading={loading}
                        className={`h-12 px-8 font-medium bg-gradient-to-r from-green-500 to-emerald-500 border-0 hover:from-green-600 hover:to-emerald-600 ${loading ? 'opacity-70' : ''
                            }`}
                        size="large"
                    >
                        {loading ? '‚è≥ ƒêang t·∫°o...' : '‚úÖ T·∫°o ng∆∞·ªùi d√πng'}
                    </Button>
                </div>
            </Form>
        </div>
    );
};

export default UserForm;
